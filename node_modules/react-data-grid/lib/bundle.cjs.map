{"version":3,"file":"bundle.cjs","sources":["../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/style/cell.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/cellRenderers/renderCheckbox.tsx","../src/cellRenderers/renderToggleGroup.tsx","../src/cellRenderers/renderValue.tsx","../src/DataGridDefaultRenderersProvider.ts","../src/cellRenderers/SelectCellFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useColumnWidths.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingTabIndex.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/DragHandle.tsx","../src/EditCell.tsx","../src/GroupCell.tsx","../src/style/row.ts","../src/GroupRow.tsx","../src/renderHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/ScrollToCell.tsx","../src/sortStatus.tsx","../src/style/core.ts","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type { CalculatedColumn, CellNavigationMode, GroupRow, Maybe, Position } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport { renderToggleGroup, renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.renderGroupCell ??= renderToggleGroup;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width =\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      tabIndex={tabIndex}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'tabIndex'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { clampColumnWidth, getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        tabIndex: childTabIndex\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, Direction } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.renderCell({\n            column,\n            row,\n            isCellEditable: isEditable,\n            tabIndex: childTabIndex,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n      contain: content;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  Column,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowHeightArgs,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupRowRenderer from './GroupRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport { focusSinkClassname, rootClassname, viewportDraggingClassname } from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    isGroupRow\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rawRows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx])\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isRowIdxWithinViewportBounds(rowIdx) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        let isGroupRowSelected = false;\n        if (isSelectable) {\n          assertIsValidKeyGetter<R, K>(rowKeyGetter);\n          isGroupRowSelected = row.childRows.every((cr) => selectedRows.has(rowKeyGetter(cr)));\n        }\n\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(-1)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + rowIdx + 1;\n                const summaryRowIdx = rowIdx + minRowIdx + 1;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={gridRowStart}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultRenderersProvider>\n    </div>\n  );\n}\n\nlet getCellToScrollExpression: XPathExpression | undefined;\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  getCellToScrollExpression ??= document.createExpression('div[@role=\"row\"]/div[@tabindex=\"0\"]');\n  // XPathResult.ANY_UNORDERED_NODE_TYPE === 8\n  return getCellToScrollExpression.evaluate(gridEl, 8).singleNodeValue as HTMLDivElement | null;\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","_jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","row","rowIdx","isCellEditable","renderEditCell","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","_jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","endRowIndex","updateRows","handleDoubleClick","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","_Fragment","GroupCell","isCellSelected","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","onClick","memo","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","groupRowClassname","GroupedRow","gridRowStart","selectedCellIdx","selectGroup","handleSelectGroup","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","renderSortStatus","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","sortColumn","ariaSort","headerCellClass","defaultRenderHeaderCell","onPointerDown","pointerType","pointerId","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","headerRow","headerRowClassname","HeaderRow","cells","index","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","isEditable","selectCellWrapper","openEditor","handleContextMenu","handleRowChange","newRow","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","ariaDescribedBy","testId","defaultRenderers","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","prevSelectedPosition","lastSelectedRowIdx","rowRef","shouldFocusCellRef","gridHeight","isSelectable","leftKey","rightKey","defaultGridComponents","allRowsSelected","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","focus","preventScroll","getCellToScroll","elementToFocus","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","childRow","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","enableEditor","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","getCellToScrollExpression","gridEl","document","createExpression","evaluate","singleNodeValue","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}